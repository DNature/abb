{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/divine/Documents/projects/tutorials/full-stack+mobile/abb/packages/app/src/modules/login/ui/LoginView.tsx\";\nimport React from \"react\";\nimport { loginSchema } from \"@abb/common\";\nimport { withFormik, Field } from \"formik\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Card, Text } from \"react-native-elements\";\nimport { InputField } from \"../../shared/InputField\";\n\nvar C = function (_React$PureComponent) {\n  _inherits(C, _React$PureComponent);\n\n  function C() {\n    _classCallCheck(this, C);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(C).apply(this, arguments));\n  }\n\n  _createClass(C, [{\n    key: \"render\",\n    value: function render() {\n      var handleSubmit = this.props.handleSubmit;\n      return React.createElement(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"center\",\n          paddingLeft: 20,\n          paddingRight: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        }\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 25,\n          marginBottom: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        }\n      }, \"Sign In\"), React.createElement(Field, {\n        name: \"email\",\n        placeholder: \"Email\",\n        component: InputField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        }\n      }), React.createElement(Field, {\n        name: \"password\",\n        placeholder: \"Password\",\n        component: InputField,\n        secureTextEntry: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      }), React.createElement(View, {\n        style: {\n          marginTop: 15\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        }\n      }, React.createElement(Button, {\n        onPress: handleSubmit,\n        title: \"SIGN IN\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        }\n      }))));\n    }\n  }]);\n\n  return C;\n}(React.PureComponent);\n\nexport var LoginView = withFormik({\n  validationSchema: loginSchema,\n  mapPropsToValues: function mapPropsToValues() {\n    return {\n      email: \"\",\n      password: \"\"\n    };\n  },\n  handleSubmit: function handleSubmit(values, _ref) {\n    var props, setErrors, errors;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            props = _ref.props, setErrors = _ref.setErrors;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(props.submit(values));\n\n          case 3:\n            errors = _context.sent;\n\n            if (errors) {\n              setErrors(errors);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  }\n})(C);","map":{"version":3,"sources":["/home/divine/Documents/projects/tutorials/full-stack+mobile/abb/packages/app/src/modules/login/ui/LoginView.tsx"],"names":["React","loginSchema","withFormik","Field","Button","Card","Text","InputField","C","handleSubmit","props","flex","justifyContent","paddingLeft","paddingRight","fontSize","marginBottom","marginTop","PureComponent","LoginView","validationSchema","mapPropsToValues","email","password","values","setErrors","submit","errors"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,EAAgDC,KAAhD,QAA6D,QAA7D;;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,uBAAnC;AAEA,SAASC,UAAT;;IAYMC,C;;;;;;;;;;;6BACK;AAAA,UACCC,YADD,GACkB,KAAKC,KADvB,CACCD,YADD;AAEP,aACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE;AACLE,UAAAA,IAAI,EAAE,CADD;AAELC,UAAAA,cAAc,EAAE,QAFX;AAGLC,UAAAA,WAAW,EAAE,EAHR;AAILC,UAAAA,YAAY,EAAE;AAJT,SADT;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,YAAY,EAAE;AAA9B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,WAAW,EAAC,OAAhC;AAAwC,QAAA,SAAS,EAAET,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAIE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,WAAW,EAAC,UAFd;AAGE,QAAA,SAAS,EAAEA,UAHb;AAIE,QAAA,eAAe,EAAE,IAJnB;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAWE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEU,UAAAA,SAAS,EAAE;AAAb,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAER,YAAjB;AAAsC,QAAA,KAAK,EAAC,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAXF,CARF,CADF;AA0BD;;;;EA7BaT,KAAK,CAACkB,a;;AAgCtB,OAAO,IAAMC,SAAS,GAAGjB,UAAU,CAAoB;AACrDkB,EAAAA,gBAAgB,EAAEnB,WADmC;AAErDoB,EAAAA,gBAAgB,EAAE;AAAA,WAAO;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,QAAQ,EAAE;AAAvB,KAAP;AAAA,GAFmC;AAGrDd,EAAAA,YAAY,EAAE,sBAAOe,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBd,YAAAA,KAAjB,QAAiBA,KAAjB,EAAwBe,SAAxB,QAAwBA,SAAxB;AAAA;AAAA,6CACSf,KAAK,CAACgB,MAAN,CAAaF,MAAb,CADT;;AAAA;AACNG,YAAAA,MADM;;AAEZ,gBAAIA,MAAJ,EAAY;AACVF,cAAAA,SAAS,CAACE,MAAD,CAAT;AACD;;AAJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHuC,CAApB,CAAV,CAStBnB,CATsB,CAAlB","sourcesContent":["import React from \"react\";\nimport { loginSchema } from \"@abb/common\";\nimport { withFormik, FormikErrors, FormikProps, Field } from \"formik\";\nimport { View } from \"react-native\";\nimport { Button, Card, Text } from \"react-native-elements\";\n\nimport { InputField } from \"../../shared/InputField\";\n\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface Props {\n  submit: (values: FormValues) => Promise<FormikErrors<FormValues> | null>;\n}\ninterface State {}\n\nclass C extends React.PureComponent<FormikProps<FormValues> & Props> {\n  render() {\n    const { handleSubmit } = this.props;\n    return (\n      <View\n        style={{\n          flex: 1,\n          justifyContent: \"center\",\n          paddingLeft: 20,\n          paddingRight: 20\n        }}\n      >\n        <Card>\n          <Text style={{ fontSize: 25, marginBottom: 10 }}>Sign In</Text>\n          <Field name=\"email\" placeholder=\"Email\" component={InputField} />\n\n          <Field\n            name=\"password\"\n            placeholder=\"Password\"\n            component={InputField}\n            secureTextEntry={true}\n          />\n\n          <View style={{ marginTop: 15 }}>\n            <Button onPress={handleSubmit as any} title=\"SIGN IN\" />\n          </View>\n        </Card>\n      </View>\n    );\n  }\n}\n\nexport const LoginView = withFormik<Props, FormValues>({\n  validationSchema: loginSchema,\n  mapPropsToValues: () => ({ email: \"\", password: \"\" }),\n  handleSubmit: async (values, { props, setErrors }) => {\n    const errors = await props.submit(values);\n    if (errors) {\n      setErrors(errors);\n    }\n  }\n})(C);\n"]},"metadata":{},"sourceType":"module"}