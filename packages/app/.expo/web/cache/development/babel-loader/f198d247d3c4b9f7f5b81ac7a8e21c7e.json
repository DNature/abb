{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/home/divine/Documents/projects/tutorials/full-stack+mobile/abb/packages/app/src/modules/shared/InputField.tsx\";\nimport * as React from \"react\";\nimport { Input } from \"react-native-elements\";\nvar errStyle = {\n  color: \"red\"\n};\nexport var InputField = function (_React$Component) {\n  _inherits(InputField, _React$Component);\n\n  function InputField() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, InputField);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(InputField)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onChangeText = function (text) {\n      var _this$props = _this.props,\n          setFieldValue = _this$props.form.setFieldValue,\n          name = _this$props.field.name;\n      setFieldValue(name, text);\n    };\n\n    return _this;\n  }\n\n  _createClass(InputField, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          field = _this$props2.field,\n          _this$props2$form = _this$props2.form,\n          touched = _this$props2$form.touched,\n          errors = _this$props2$form.errors,\n          props = _objectWithoutProperties(_this$props2, [\"field\", \"form\"]);\n\n      var errorMsg = touched[field.name] && errors[field.name];\n      return React.createElement(Input, _extends({}, props, {\n        errorStyle: errStyle,\n        errorMessage: errorMsg,\n        onChangeText: this.onChangeText,\n        value: field.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        }\n      }));\n    }\n  }]);\n\n  return InputField;\n}(React.Component);","map":{"version":3,"sources":["/home/divine/Documents/projects/tutorials/full-stack+mobile/abb/packages/app/src/modules/shared/InputField.tsx"],"names":["React","Input","errStyle","color","InputField","onChangeText","text","props","setFieldValue","form","name","field","touched","errors","errorMsg","value","Component"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,KAAT,QAAsB,uBAAtB;AAEA,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAjB;AACA,WAAaC,UAAb;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UACEC,YADF,GACiB,UAACC,IAAD,EAAkB;AAAA,wBAI3B,MAAKC,KAJsB;AAAA,UAErBC,aAFqB,eAE7BC,IAF6B,CAErBD,aAFqB;AAAA,UAGpBE,IAHoB,eAG7BC,KAH6B,CAGpBD,IAHoB;AAK/BF,MAAAA,aAAa,CAACE,IAAD,EAAOJ,IAAP,CAAb;AACD,KAPH;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAQW;AAAA,yBAKH,KAAKC,KALF;AAAA,UAELI,KAFK,gBAELA,KAFK;AAAA,2CAGLF,IAHK;AAAA,UAGGG,OAHH,qBAGGA,OAHH;AAAA,UAGYC,MAHZ,qBAGYA,MAHZ;AAAA,UAIFN,KAJE;;AAOP,UAAMO,QAAQ,GAAGF,OAAO,CAACD,KAAK,CAACD,IAAP,CAAP,IAAuBG,MAAM,CAACF,KAAK,CAACD,IAAP,CAA9C;AACA,aACE,oBAAC,KAAD,eACMH,KADN;AAEE,QAAA,UAAU,EAAEL,QAFd;AAGE,QAAA,YAAY,EAAEY,QAHhB;AAIE,QAAA,YAAY,EAAE,KAAKT,YAJrB;AAKE,QAAA,KAAK,EAAEM,KAAK,CAACI,KALf;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AASD;AAzBH;;AAAA;AAAA,EAAgCf,KAAK,CAACgB,SAAtC","sourcesContent":["import * as React from \"react\";\nimport { FieldProps } from \"formik\";\nimport { Input } from \"react-native-elements\";\n\nconst errStyle = { color: \"red\" };\nexport class InputField extends React.Component<FieldProps<any>> {\n  onChangeText = (text: string) => {\n    const {\n      form: { setFieldValue },\n      field: { name }\n    } = this.props;\n    setFieldValue(name, text);\n  };\n  render() {\n    const {\n      field, // { name, value, onChange, onBlur }\n      form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n      ...props\n    } = this.props;\n\n    const errorMsg = touched[field.name] && errors[field.name];\n    return (\n      <Input\n        {...props}\n        errorStyle={errStyle}\n        errorMessage={errorMsg as string}\n        onChangeText={this.onChangeText}\n        value={field.value}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}